			1. 검색

	검색이란?

- 원하는 데이터를 찾음

	검색을 할 때에 key란 무엇인가?

- 원하는 데이터를 정해주는 고유값

	검색의 종류에는 어떤 것들이 있는가?

- 선형 검색 (오도 n)
- 2진 검색 (오도 log2n)

	정렬과 검색은 어떤 관계일까?

- 정렬이 잘된 데이터는 검색이 빠르다. (이진탐색트리)

			2. 해싱

	해싱이란?

- 해싱 함수를 이용하여 자료를 검색하는 방법. 데이터를 해시 테이블 이라는 배열에 저장하고, 해싱 함수를 이용하여 데이터가 위치한 곳의 주소를 찾기 때문에 신속하게 원하는 자료를 검색할수 있는 키 - 주소 변환 방법

- 직접 접근 파일을 구성할 때 사용

- 속도는 가장 빠르지만 충돌 현상시 오버플로의 해결이 부담이 가중되며, 많은 기억 공간을 요구한다.

	해싱 함수의 종류

- 나눗셈 방법 : 해싱 함수 기법에서 키값을 양의 정수인 소수로 나누어 나머지를 홈 주수로 취하는 방법

- Folding Method (폴딩 방법) : 해싱 함수 중 주어진 키를 여러 부분으로 나누고, 각 부분의 값을 더하거나 배타적 논리합(XOR) 연산을 통하여 나온 결과로 주소를 취하는 방법

- 중간 제곱 방법 : 
1. 레코드 키값을 제곱하고나서 그 중간 부분의 값을 주소로 계산하는 방법

2. 해시 테이블의 크기에 따라서 중간 부분의 적당한 자릿수를 선택할 수 있다.

3. 비트 단위로 n 자리수를 중간 위치 자릿수로 가정하면 해시 테이블의 크기는 2n 이다.

- 자릿수 분석 방법 :

	해싱의 장점과 단점

- 선형 개방 주소법 : 충돌이 발생한 곳 다음 버킷을 차례대로 하나씩 검색해 첫 번째 찾아진 빈 버킷에 그 데이터를 넣는 방식

- Chaining : 포인터를 이용하여 같은 해시 함수값을 갖는 레코드들을 연결 리스트로 연결하는 방식이다.

- 재해싱 : 충돌이 발생하면 새로운 해시 함수를 적용해서 새로운 홈 주소를 계산한다.


			3. 게임 트리
	게임 트리란?
- 이산적인 게임의 진행 상황을 표현한 트리
- 플레이어는 게임트리를 이용하여 미래를 예측하고 승리를 계획할 수 있다.

- 게임의 종류
	- 완전정보 게임 : 바둑, 장기 등

	- 불완전 정보 게임 : 포커, 스타크래프트 등

	최대 최소 트리
- 게임트리에 평가함수를 적용하요 게임의 진행을 예측하기 위한 트리

트리에는 가정이 들어간다.
1. 플레이어는 모두 충분히 똑똑하다.
2. 플레이어는 모두 승리하기 위하여 최선을 다한다.

			4. 그래프

그래프란 무엇인가?

- 그래프는 연결되어 있는 객체간의 관계를 표현할 수 있는 자료구조

그래프의 종류에는 어떤 것들이 있는가?

- 무방향 그래프( Undirected Graph) : 방향성이 없는 간선으로 이루어진 그래프
	정점의 수 : n
	간선의 수 : n(n - 1)/2

- 방향 그래프( Directed Graph) : 간선에 방향성을 나타내어 정점간의 방향관계를 나타내는 그래프
	전체 간선ㅇ의 수 : n(n - 1)	

- 완전 그래프( Complete Graph) : 모든 정점이 인접한 상태의 그래프

그래프에서 사용되는 용어들에는 어떤 것들이 있는가?

- 정점(Vertex) : 노드(Node)라고도 하며 객체를 나타내며 데이터가 저장된 곳

- 간선(Edge) : 간선이란 정점을 연결한 것

- 차수(Degree) : 차수란 하나의 정점에 닿아있는 간선의 수

- 인접(Adjant) : 인접이란 한정점에서 간선을 한번만 통해 갈 수 있다면 해당 정점간은 인접하다고 한다.

- 부속(incidant) : 정점에 연결된 간선

경로(path)
- 임의의 정점으로부터 다른 정점 까지 이르는 간선들의 집합

단순 경로
- 모든 정점이 다른 경로일 때

경로의 길이
- 경로 상에 존재하는 간선의 수

사이클
- 첫 번째 정점과 마지막 정점이 동일한 단순 경로

비순환 그래프
- 어떤 사이클도 포함하지 않는 그래프 루프와 중복된 간선을 허용하지 않는다.

그래프의 표현방법
1. 인접 행렬 : 정점들 사이의 인접 관계를 정점 수만큼 행과 열을 갖는 행렬을 이용하여 표현하는 방법이다.
정점의 개수에 비해서 간선의 개수가 적은 희소 그래프에 대한 인접행렬은 희소 행렬이 되므로 메모리의 낭비가 발생한다.

2. 인접 리스트 : 그래프의 각각의 정점에 대해 인접한 정점들을 연결 리스트로 표현하는 구조로 각 정점의 차수만큼 노드를 연결한다.

그래프에 연결된 정점들만을 이용하여 표현함으로 정점들 간의 간선의 수가 적은 경우에 메모리의 낭비를 줄일 수 있다.

인접 리스트의 각 노드는 정점을 저장하는 필드와 다음 인접 정점을 연결하는 링크 필드로 구성되고 정점의 헤드노드는 정점에 대한 리스트의 시작을 의미한다.

최소 신장트리
- 신장 트리( spanning tree )? : 임의의 그래프 G에 대한 부분 그래프 중에서 G의 모든 정점을 연결하는 트리

- 그래프의 모든 정점을 포함한 연결된 최소의 부 그래프

	--------------------------------------------
	| 정점의 수가 N일 때, N-1개의 간선을 갖는다.|
	| 연결되어있다.				    |
	| cycle이 없다.				    |
	--------------------------------------------

			5. 트리
트리란?
(정의 1)
- 하나 이상의 노드로 구성된 유한 집합
- 루트라는 특별한 노드가 있다
- 나머지 노드들은 다시 각각이 트리이면서 교차하지 않는 분리 집합으로 분할된다. 이들은 루트의 서브트리라고 한다.

(정의 2)
- 루트라는 특별한 노드를 가지는 사이클이 존재하지 않는 그래프

트리의 용어

- 차수 : 각 노드가 가진 하부 가지의 갯수
- 트리의 차수 : 각 노드의 차수 중 최대치
- 트리의 높이 : 해당 트리에 속한 노드의 레벨 중 최대값
- forest : 분리된 트리들의 집합
- 부모노드 ,자식노드, 형제노드, 조상노드, 후손노드

2진 트리
(정의 1)
- 각 노드가 많아야 두개의 부트리를 갖으며 부트리도 역시 이진트리인 트리

(정의 2)
- 공집하이거나, 루트와 왼쪽 부트리 및 오른쪽 부트리로 불리는 두개의 서로 분리된 이진트리로 구성된 트리

포화 이진 트리
- 모든 레벨의 노드가 꽉 차있는 상태의 트리

완전 이진 트리
- 높이가 k일 때 부터 k-1까지의 노드는 모두 차있고, k레벨은 왼쪽부터 차례대로 차 있는 이진트리

사향 이진 트리
- 한쪽으로 기울어진 이진 트리

			6. 스택
스택이란?
- 정의 : 여러 개의 데이타 항목들이 일정하게 서로 나열된 자료 구조로, 한쪽 끝에서만 삽입, 삭제할 수 있는 구조

스택의 원리 및 성질, 구조
- LIFO(Last In First Out)

스택의 동작
Push : 데이타 항목의 삽입
Pop : 데이타 항목의 삭제
Overflow Check : 스택이 가득 차있는지 검사
Underflow Check : 스택이 비었는지 검사

			7. 큐
큐란?
- 정의 : 한쪽 끝에서 데이터가 삽입되고 반대쪽 끝에서 데이터가 삭제되는 순서 리스트

큐의 원리 및 성질, 구조
- FIFO(First in First Out)

선형 큐의 동작
- 삽입
- full 검사
- 삭제
- empty 검사

큐의 종류
- 선형 큐 : 한 방향으로 데이터 항목들이 삽입, 삭제 되는 큐

- 환형 큐 : 시작점과 끝점이 서로 연결된 큐

환형 큐에서의 full 검사
front == rear

환형 큐에서의 empty 검사
front == rear

full과 empty의 구분방법?
empty에서 front == rear를 사용하고
full에서 front == rear + 1을 사용하면 해결은된다.

			8. 데크
데크란?
- 정의 : 삽입과 삭제가 양쪽 끝에서 모두 일어나는 자료구조

데크의 종류?
- 스크롤 : 삭제만 양쪽에서 가능
- 쉘프 : 삽입만 양쪽에서 가능

